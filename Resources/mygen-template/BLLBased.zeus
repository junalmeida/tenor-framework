##|TYPE Template
##|UNIQUEID e2e7a5f3-b244-47d3-ba9b-310b58048069
##|TITLE TernoBLL
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE VB.Net
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	public override void Setup()
	{
		ui.Title = "Gerar códigos";
		ui.Width = 500;
		ui.Height = 650;

		GuiLabel lblDB = ui.AddLabel("lblDatabases", "Escolha um banco:", "Escolha um banco de dados.");
		GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "");

		GuiLabel lblTbl = ui.AddLabel("lblTables", "Escolha uma tabela:", "Escolha uma tabela.");
		GuiCheckBoxList cmbTables = ui.AddCheckBoxList("cmbTable", "");
		cmbTables.Height = 200;
		GuiButton btn = ui.AddButton("btnSelectAll", "Selecionar Todos", "");
		btn.AttachEvent("onclick", "btn_onclick");
		
		GuiLabel lblNamespace = ui.AddLabel("lblNamespace", "Namespace:", "Namespace da(s) classe(s).");
		GuiTextBox txtNamespace = ui.AddTextBox("txtNamespace", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.NameSpace",@"BLL.REES.Institucional"), "");

		/*GuiLabel lblClasse = ui.AddLabel("lblNomeClasse", "Nome da Classe:", "Nome da Classe. Mude se nÃ£o coincidir com o nome da tabela. Ex.: Usuario");
		GuiTextBox txtNomeClasse = ui.AddTextBox("txtNomeClasse", "", "");
*/
		GuiLabel lblOutput = ui.AddLabel("lblOutput", "Pasta de destino:", "Pasta onde serão salvos os arquivos.");
		GuiTextBox txtOutput = ui.AddTextBox("txtOutput", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Pasta",@"C:\Documents and Settings\Produção\Meus documentos\templates"), "");
		GuiFilePicker btnOutputPath = ui.AddFilePicker("btnOutputPath", "Escolha a pasta de destino para os arquivos gerados.", "Selecione a pasta de destino.", "txtOutput", true);

		setupDatabaseDropdown(cmbDatabases);
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
		//cmbTables.AttachEvent("onchange", "cmbTables_onchange");
		
		ui.ShowGui = true;
	}

	public void setupDatabaseDropdown(GuiComboBox cmbDatabases)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					try {
						cmbDatabases.SelectedValue = (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Banco",MyMeta.DefaultDatabase.Name);
					} catch (Exception e) { }
					bindTables(cmbDatabases.SelectedValue);
				}
	
				//lblError.Text = "";
			}
			else
			{
				//lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			//lblError.Text = ex.Message;
		}
	}
	
	public void bindTables(string sDatabase)
	{
		//GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			cmbTable.BindData(db.Tables);
			//int index = cmbTable.Add("0", "(Todas)");
			//lblError.Text = "";
		}
		catch (Exception ex)
		{
			//lblError.Text = ex.Message;
		}
	}
	
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindTables(cmbDatabases.SelectedText);
	}
	public void btn_onclick(GuiButton control)
	{
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		cmbTable.SelectAll();
		
	}
	/*
	public void cmbTables_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDb = ui["cmbDatabase"] as GuiComboBox;
		GuiComboBox cmbTables = ui["cmbTable"] as GuiComboBox;
		//GuiTextBox txtNomeClasse = ui["txtNomeClasse"] as GuiTextBox;
		
		ITable tbl = MyMeta.Databases[cmbDb.SelectedText].Tables[cmbTables.SelectedText];
		//txtNomeClasse.Text = cmbTables.SelectedText;
	}*/
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
using System.Collections.Generic;
using System.Text;
using Microsoft.Win32;
public class GeneratedTemplate : DotNetScriptTemplate
{
	public ITable tbl;
	public string nomeDB;
	public ArrayList tabelaEscolhida;
	public string nomeTabela;
	public string outputPath;
	
	public string Namespace;
	public string OriginalNamespace;

	public string nomeClasse;
	public string schema;

	public string tagHeaderAbrir;
	public string tagHeaderFechar;

	public GeneratedTemplate(ZeusContext context) : base(context) {}
	
	public void inicializarPropriedades()
	{
		this.nomeDB = input["cmbDatabase"].ToString();
		
		this.tabelaEscolhida = (ArrayList)input["cmbTable"];
		//this.nomeTabela = input["cmbTable"].ToString();
		this.outputPath = input["txtOutput"].ToString();
		this.outputPath += this.outputPath.EndsWith("\\") ? "" : "\\";
		
		this.Namespace = input["txtNamespace"].ToString();
		this.OriginalNamespace = input["txtNamespace"].ToString();
		
		//this.nomeClasse = this.nomeTabela;
		
		//this.tbl = MyMeta.Databases[nomeDB].Tables[nomeTabela];

		this.tagHeaderAbrir = "<" + "%" + "@";
		this.tagHeaderFechar = "%" + ">";
		
		
		Registry.CurrentUser.SetValue("BLLBase.NameSpace", this.Namespace);
		Registry.CurrentUser.SetValue("BLLBase.Pasta", this.outputPath);
		Registry.CurrentUser.SetValue("BLLBase.Banco", this.nomeDB);
	}

	public override void Render()
	{
		this.inicializarPropriedades();

		string fileName = "";
		
		foreach(ITable tabela in MyMeta.Databases[nomeDB].Tables)
		{
			if (this.tabelaEscolhida.Contains(tabela.Name))
			{
				this.tbl = tabela;
				this.nomeTabela = tbl.Name;
				this.nomeClasse = this.nomeTabela;
				this.schema = tbl.Schema;
				this.Namespace = this.OriginalNamespace;
				if (this.schema != "dbo") {
					this.Namespace += "." + this.schema;
				}
				
				fileName = nomeClasse + ".vb";
				this.gerarClasse(fileName);
			}
		}
		
		try {
			System.Diagnostics.Process.Start(Environment.ExpandEnvironmentVariables("%SystemRoot%") + "\\explorer.exe", "\"" + this.outputPath + "\"");
		} catch (Exception e) { }
		
	}
	
	
	public string ToPlural(string texto) {
		List<string> l = new List<string>();
		if(texto.IndexOf("_") == -1){
			foreach (char i in texto) {
				if (char.IsUpper(i)) {
					l.Add(i.ToString());
				} else {
					if (l.Count == 0)
						l.Add(i.ToString());
					else
						l[l.Count-1] += i.ToString();
				}
			}
			for(int i=0;i<l.Count;i++) {
				if (l[i].Substring(l[i].Length-1) == "m") {
					l[i] = l[i].Substring(0,l[i].Length-1) + "ns";
				} else if (l[i].Substring(l[i].Length-1) == "r") {
					l[i] = l[i] + "es";
				} else {
					l[i] = l[i] + "s";
				}
			}
		} else {
			foreach (char i in texto) {
				if (i == '_') {
					//l.Add(i.ToString());
				} else {
					if (l.Count == 0)
						l.Add(i.ToString());
					else
						l[l.Count-1] += i.ToString();
				}
			}
			for(int i=0;i<l.Count;i++) {
				if (l[i].Substring(l[i].Length-1) == "m") {
					l[i] = l[i].Substring(0,l[i].Length-1) + "ns";
				} else if (l[i].Substring(l[i].Length-1) == "r") {
					l[i] = l[i] + "es";
				} else {
					l[i] = l[i] + "s";
				}
			}
		}
		return string.Join("", l.ToArray());
	}
	

	public void gerarClasse(string fileName)
	{

%>Imports Tenor.Data
Imports Tenor.BLL
Imports System.Collections.Generic

Namespace <%=Namespace%>
	''' <summary>
	''' Representa a tabela <%= tbl.Name %>.
	''' <%= tbl.Description.Replace("\r\n","") %>
	''' </summary>
	''' <remarks></remarks>
	<Serializable()> _
	Partial Public Class <%= tbl.Name %>
		Inherits BLLBase

		Public Overrides Readonly Property SchemaName() as String
			Get
				Return "<%= tbl.Schema %>"
			End Get
		End Property
		
#Region " Campos "
<%
		//Para aproveitar o FOR das colunas, os valores padrão serão salvos no StringBuilder
		StringBuilder defaults = new StringBuilder();
		StringBuilder constCampos = new StringBuilder();
		foreach (IColumn col in tbl.Columns)
		{
		
		
			string nomeCampo = col.Name;
			string atributos = "";
			if (nomeCampo.ToLower().Equals(tbl.Name.ToLower()))
			{
				nomeCampo = "Campo" + nomeCampo;
				atributos += "FieldName:=\"" + col.Name + "\", PrimaryKey:=" + col.IsInPrimaryKey.ToString() + ", AutoNumber:=" + col.IsAutoKey.ToString();
			}
			string tipoCampo = col.LanguageType;
			if (col.IsNullable && !col.LanguageType.ToLower().Equals("string") && !col.LanguageType.ToLower().Contains("()"))
			{
				tipoCampo = "Nullable(Of " + col.LanguageType + ")";
			}
			if (string.IsNullOrEmpty(atributos) && col.IsInPrimaryKey)
			{
				atributos += "PrimaryKey:=True, AutoNumber:= " + col.IsAutoKey.ToString();
			}

			constCampos.AppendLine("			Public Const " + nomeCampo + " As String = \"" + nomeCampo + "\"");

			bool dolazyload = false;
			if (col.LanguageType.ToLower() == "byte()") {
				if (!string.IsNullOrEmpty(atributos)) atributos += ", ";
				atributos += "LazyLoading:=True";
				dolazyload=true;
			}
			
			string field = "<Field(";
			field += atributos;
			field += ")> _";
			
			// ----- Valor Padrão do Banco -----
			
				
			if (!string.IsNullOrEmpty(col.Default)) {
				string valor = col.Default;
				switch (col.LanguageType) {
					case "DateTime":
						if (valor.ToLower().Contains("getdate()")) {
							valor = nomeCampo + " = System.Date.Now()";
						} else {
							valor = nomeCampo + " = Data.Parse(" + valor + ")";
						}
					break;
					case "String":
						if (valor.StartsWith("N'")) {
							valor = nomeCampo + " = \"" + valor.Substring(2, valor.Length - 5).Replace("''", "'") +  "\"";
						} else if (valor.StartsWith("(N'")) {
							valor = nomeCampo + " = \"" + valor.Substring(3, valor.Length - 6).Replace("''", "'") +  "\"";
						} else {
							valor = nomeCampo + " = " + valor.Replace("'","\"").Replace("\"\"", "'");
						}
						
			
								
					break;
					default:
						valor = nomeCampo + " = " + valor;
					break;
				}
			
				
				defaults.AppendLine("			" + valor);
			}
			
			
			// ---------------------------------
			
			
			
			
if (dolazyload) { %>
		Private _<%= nomeCampo %>_firstaccess as Boolean = True
<% 
}
%>		Private _<%= nomeCampo %> As <%= tipoCampo %>
		''' <summary>
		''' Campo <%= nomeCampo %>.
		''' <%= col.Description.Replace("\r\n","") %>
		''' </summary>
		<%= field %>
		Public Property <%= nomeCampo %> As <%= tipoCampo %>
			Get
				<%
				if (dolazyload) {
				%>If (_<%= nomeCampo %>_firstaccess AndAlso Not LazyLoadingDisabled) Then
					LoadProperty("<%= nomeCampo %>")
				End If
<%				}
				%>Return _<%= nomeCampo %>
			End Get
			Set(ByVal value As <%= tipoCampo %>)
<%
				if (dolazyload) {
%>				_<%= nomeCampo %>_firstaccess = False
<%				}
				if (tipoCampo == "String" && col.CharacterMaxLength > 0) {
					%>				If (Not String.IsNullOrEmpty(value) AndAlso value.Length > <%=col.CharacterMaxLength.ToString()%>) Then
					Throw New InvalidOperationException("Cannot set a string with Length greater than <%=col.CharacterMaxLength.ToString()%>")
				End If
<%
				}
				
				%>				_<%= nomeCampo %> = value
			End Set
		End Property
<%
		}
%>		

		Partial Public Class Campos
			Private Sub New()
			End Sub
			
<%=constCampos.ToString()%>		
		End Class

#End Region

#Region " Foreign Keys "
		
<%
		foreach(IForeignKey fk in tbl.ForeignKeys)
		{
		
			string nmeSpace = "";
		
			bool onetoone = false;
			string nomeCampo = "";
			string tipoCampo = "";
			
			string atributos = "";
			string constructor = "";
			string readOnly = "";
			
			bool isNew = false;
			
			if (fk.ForeignTable.Equals(this.tbl))
			{
				onetoone = true;
				nomeCampo = fk.PrimaryTable.Name;
				nmeSpace = fk.PrimaryTable.Schema;
				if (nmeSpace != "" && nmeSpace != "dbo" && nmeSpace != tbl.Schema)
					nmeSpace = nmeSpace + ".";
				else
					nmeSpace = "";
				tipoCampo = nmeSpace+ fk.PrimaryTable.Name;
				
				// Consertar isto! Os itens abaixo devem ser nomes de propriedades.
				atributos = "<ForeignKey(\"" + fk.PrimaryColumns[0].Name + "\", \"" + fk.ForeignColumns[0].Name + "\")> _";
				readOnly = "";
			}
			else if(fk.PrimaryTable.Equals(this.tbl) && fk.ForeignTable.PrimaryKeys.Count == 1 && fk.PrimaryColumns.Count == 1 && fk.ForeignColumns[0].IsInPrimaryKey) {
				onetoone = true;
				nomeCampo = fk.ForeignTable.Name;
				nmeSpace = fk.ForeignTable.Schema;
				if (nmeSpace != "" && nmeSpace != "dbo" && nmeSpace != tbl.Schema)
					nmeSpace = nmeSpace + ".";
				else
					nmeSpace = "";
				tipoCampo = nmeSpace + fk.ForeignTable.Name;
				
				// Consertar isto! Os itens abaixo devem ser nomes de propriedades.
				atributos = "<ForeignKey(\"" + fk.ForeignColumns[0].Name + "\", \"" + fk.PrimaryColumns[0].Name + "\")> _";
				readOnly = "";
			}
			else if(fk.PrimaryTable.Equals(this.tbl))
			{
				nomeCampo = ToPlural(fk.ForeignTable.Name);
				nmeSpace = fk.ForeignTable.Schema;
				if (nmeSpace != "" && nmeSpace != "dbo" && nmeSpace != tbl.Schema)
					nmeSpace = nmeSpace + ".";
				else
					nmeSpace = "";
				
				tipoCampo = "BLLCollection(Of " + nmeSpace + fk.ForeignTable.Name + ")";
				constructor = "(Me, \"" + nomeCampo + "\")";
				isNew = true;
				// Consertar isto! Os itens abaixo devem ser nomes de propriedades.
				atributos = "<ForeignKey(\"" + fk.ForeignColumns[0].Name + "\", \"" + fk.PrimaryColumns[0].Name + "\")> _";
				readOnly = "ReadOnly ";
			}
			
%>
		Private _<%= nomeCampo %>_firstaccess as Boolean = True
		Private _<%= nomeCampo %> As <%= tipoCampo %>
		''' <summary>
		''' 
		''' </summary>
		''' <value></value>
		''' <returns></returns>
		''' <remarks></remarks>
		<%= atributos %>
		Public <%= readOnly %>Property <%= nomeCampo %> As <%= tipoCampo %>
			Get
				<%
				if(isNew)
				{%>If _<%= nomeCampo %> Is Nothing Then
                    _<%= nomeCampo %> = New <%= tipoCampo + constructor %>
                End If
				<%
				}
				%>If (_<%= nomeCampo %>_firstaccess AndAlso Not LazyLoadingDisabled) Then
					_<%= nomeCampo %>_firstaccess = False
					LoadForeign("<%= nomeCampo %>", True)
				End If
				Return _<%= nomeCampo %>
			End Get<%
			if(string.IsNullOrEmpty(readOnly))
			{
%>
			Set(ByVal value As <%= tipoCampo %>)
				_<%= nomeCampo %>_firstaccess = False
				_<%= nomeCampo %> = value
				<%
			if (onetoone) {
			%>
				If value Is Nothing Then
					<%=fk.ForeignColumns[0].Name%> = Nothing
				Else
					<%=fk.ForeignColumns[0].Name%> = value.<%=fk.PrimaryColumns[0].Name%>
				End If
			<%
			}
			%>End Set<%
			}
%>
		End Property
<%
		}
%>

#End Region

#Region " Constructors "

		Public Sub New()
		End Sub

		Public Sub New(ByVal LazyLoadingDisabled As Boolean)
			MyBase.New(LazyLoadingDisabled)
		End Sub
		
		''' <summary>
		''' Carrega os dados de um <%= tbl.Name %> cadastrado com a chave primária passada
		''' </summary><%
		string assign = "";
		string construtor = "";
		foreach (IColumn col in tbl.PrimaryKeys)
		{
			construtor += (string.IsNullOrEmpty(construtor)) ? "" : ", ";
			construtor += "ByVal p" + col.Name + " As " + col.LanguageType;
			assign += "Me." + col.Name + " = p" + col.Name + "\r\n";
%>
		''' <param name="p<%= col.Name %>"><%= col.Name %> do <%= tbl.Name %></param><%
		}
%>
		''' <remarks></remarks>
		Public Sub New(<%= construtor %>)
			<%= assign %>			Bind()
		End Sub


		''' <summary>
		''' Carrega os dados de um <%= tbl.Name %> cadastrado com a chave primária passada
		''' </summary><%
		foreach (IColumn col in tbl.PrimaryKeys)
		{
%>
		''' <param name="p<%= col.Name %>"><%= col.Name %> do <%= tbl.Name %></param><%
		}
		construtor += ", ByVal LazyLoadingDisabled As Boolean";
%>
		''' <remarks></remarks>
		Public Sub New(<%= construtor %>)
			MyBase.New(LazyLoadingDisabled)
			<%= assign %>			Bind()
		End Sub

#End Region

#Region " Search "

        Public Shared Shadows Function Search(ByVal Conditions As ConditionCollection, ByVal Sorting As SortingCollection) As <%= tbl.Name %>()
            Return Search(Conditions, Sorting, False)
        End Function


        Public Shared Shadows Function Search(ByVal Conditions As ConditionCollection, ByVal Sorting As SortingCollection, ByVal Distinct As Boolean) As <%= tbl.Name %>()
            Return Search(Conditions, Sorting, Distinct, True)
        End Function

        Public Shared Shadows Function Search(ByVal Conditions As ConditionCollection, ByVal Sorting As SortingCollection, ByVal Distinct As Boolean, ByVal LazyLoading As Boolean) As <%= tbl.Name %>()
            Return Search(Conditions, Sorting, Distinct, LazyLoading, Nothing)
        End Function

        ''' <summary>
        ''' Realiza uma pesquisa e retorna uma coleção de CLASSE
        ''' </summary>
        ''' <param name="Conditions"></param>
        ''' <param name="Sorting"></param>
        ''' <param name="Distinct"></param>
        ''' <param name="LazyLoading"></param>
        ''' <param name="Connection"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Shared Shadows Function Search(ByVal Conditions As ConditionCollection, ByVal Sorting As SortingCollection, ByVal Distinct As Boolean, ByVal LazyLoading As Boolean, ByVal Connection As System.Configuration.ConnectionStringSettings) As <%= tbl.Name %>()
            Dim sc As New SearchOptions(GetType(<%= tbl.Name %>))
            If Conditions IsNot Nothing Then
                sc.Conditions = Conditions
            End If
            If Sorting IsNot Nothing Then
                sc.Sorting = Sorting
            End If
            sc.Distinct = Distinct
            sc.LazyLoading = LazyLoading

            Return CType(BLLBase.Search(sc, Connection), <%= tbl.Name %>())
        End Function
        
#End Region

		'''' <summary>
		'''' Valida se os dados estão consistentes para a persistência no banco
		'''' </summary>
		'''' <returns>Se validou ou não</returns>
		'''' <remarks></remarks>
		'Protected Overrides Function Validate() As Boolean
		'	' ---- TODO: Implementar validação ----
		'	Return True
		'End Function
		
		
		
		''' <summary>
		''' Inicializa a classe com os valores padrão.
		''' </summary>
		''' <remarks></remarks>
		Protected Overridable Sub InicializarPadroes()
<%= defaults.ToString()%>			
		End Sub
	End Class
End Namespace
<%
		this.salvar(fileName);
	}

	public void salvar(string nomeArquivo)
	{
		this.salvar(nomeArquivo, true);
	}
	
	public void salvar(string nomeArquivo, bool utf)
	{
		string encoding = "utf8";
		if(!utf)
			encoding = "ascii";
		
		if (this.tbl.Schema != "dbo") {
			output.saveEnc(this.outputPath + this.tbl.Schema + "\\AutoGenerated\\" + nomeArquivo, "o", encoding);
		} else {
			output.saveEnc(this.outputPath + "AutoGenerated\\" + nomeArquivo, "o", encoding);
		}
		output.clear();
	}

}
%>
##|BODY_END
