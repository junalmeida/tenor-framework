##|TYPE Template
##|UNIQUEID e2e7a5f3-b244-47d3-ba9b-310b58048069
##|TITLE TenorBLL Based
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE System.Windows.Forms.dll, System.Xml.dll %>
<%#NAMESPACE System.Xml.Serialization, System.IO, System.Collections.Generic, System.Collections.Specialized, System.Windows.Forms %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}
	
	public override void Setup()
	{
		ui.Title = "Tenor Framework - Mapping";
		ui.Width = 500;
		ui.Height = 650;
		
		List<List<DictionaryEntry>> list = null;
		
		try
		{
			StringReader reader = new StringReader(File.ReadAllText(this.context.ExecutingTemplate.FilePath + "TemplateSnippets.xml", System.Text.UnicodeEncoding.Unicode));
			XmlSerializer serializer = new XmlSerializer(typeof(List<List<DictionaryEntry>>));
			list = (List<List<DictionaryEntry>>)serializer.Deserialize(reader);
		}
		catch(Exception)
		{
			GuiLabel lblError = ui.AddLabel("lblError", "Error: the file \"TemplateSnippets.xml\" must be placed in the same folder this template is being executed from.", "");
			lblError.Height = 100;
			ui.ShowGui = true;
			return;
		}		

		GuiLabel lblDB = ui.AddLabel("lblDatabases", "Choose a database:", "Choose a database.");
		GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "");

		GuiLabel lblLanguage = ui.AddLabel("lblLanguage", "Choose an output language:", "Choose an output language.");
		GuiComboBox cmbLanguages = ui.AddComboBox("cmbLanguage", "");
		
		int i = 0;
		
		string languageHistory = (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Language", MyMeta.Language);
		
		if(!MyMeta.Language.Equals(languageHistory, StringComparison.InvariantCultureIgnoreCase))
			MyMeta.Language = languageHistory;

		foreach(List<DictionaryEntry> item in list)
		{
			string value = item[0].Value.ToString();
			cmbLanguages.Items.Add(i.ToString(), value);
			if (value == languageHistory)
				cmbLanguages.SelectAtIndex(i);
			i++;
		}

		input["languages"] = list;
		
		GuiLabel lblTbl = ui.AddLabel("lblTables", "Desired tables:", "Choose the tables from which you want to generate classes.");
		GuiCheckBoxList cmbTables = ui.AddCheckBoxList("cmbTable", "");
		cmbTables.Height = 200;
		GuiButton btn = ui.AddButton("btnSelectAll", "Select/deselect all tables", "");
		btn.AttachEvent("onclick", "btn_onclick");
		
		GuiLabel lblNamespace = ui.AddLabel("lblNamespace", "Namespace:", "Default namespace.");
		GuiTextBox txtNamespace = ui.AddTextBox("txtNamespace", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Namespace", "Tenor"), "");

		GuiLabel lblPluralLanguage = ui.AddLabel("lblPluralLanguage", "Choose the language used for plurals:", "Choose the language used for plurals.");
		GuiComboBox cmbPluralLanguage = ui.AddComboBox("cmbPluralLanguage", "");
		cmbPluralLanguage.Items.Add("en-US", "English (en-US)");
		cmbPluralLanguage.Items.Add("pt-BR", "Português (pt-BR)");
		cmbPluralLanguage.SelectedValue = (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.PluralLanguage", "en-US");

		GuiLabel lblOutput = ui.AddLabel("lblOutput", "Target folder:", "Where do you want to save your files?");
		GuiTextBox txtOutput = ui.AddTextBox("txtOutput", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Folder", @"C:\Documents and Settings\Produção\Meus documentos\templates"), "");
		GuiFilePicker btnOutputPath = ui.AddFilePicker("btnOutputPath", "Select the target folder.", "Select the target folder.", "txtOutput", true);

		setupDatabaseDropdown(cmbDatabases);
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
		cmbLanguages.AttachEvent("onchange", "cmbLanguages_onchange");

		ui.ShowGui = true;
	}

	public void setupDatabaseDropdown(GuiComboBox cmbDatabases)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				
				string defaultDatabase = string.Empty;

				if (MyMeta.DefaultDatabase != null) 
					defaultDatabase = MyMeta.DefaultDatabase.Name;
				
				try
				{
					defaultDatabase = (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Database", defaultDatabase);
				}
				catch (Exception e) { }
				
				if(!string.IsNullOrEmpty(defaultDatabase) && cmbDatabases.Contains(defaultDatabase))
				{
					cmbDatabases.SelectedValue = defaultDatabase;
					bindTables(cmbDatabases.SelectedValue);
				}
			}
		}
		catch (Exception) { }
	}
	
	public void bindTables(string sDatabase)
	{
		string[] tables = ((string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Tables","")).Split(';');
	
		int count = 0;
	
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			cmbTable.BindData(db.Tables);
			
			foreach(string item in tables) 
			{
				try 
				{
					cmbTable.Select(item);
				}
				catch {}
			}
		}
		catch (Exception) { }
	}
	
	public void cmbDatabases_onchange(GuiComboBox cmbDatabases)
	{
		bindTables(cmbDatabases.SelectedText);
	}
	
	private bool all;
	
	public void btn_onclick(GuiButton control)
	{
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		if(!all)
		{
			cmbTable.SelectAll();
			all = true;
		}
		else
		{
			cmbTable.ClearSelected();
			all = false;
		}
	}
	
	public void cmbLanguages_onchange(GuiComboBox cmbLanguages)
	{
		if(!MyMeta.Language.Equals(cmbLanguages.SelectedText, StringComparison.InvariantCultureIgnoreCase))
			MyMeta.Language = cmbLanguages.SelectedText;
	}
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#REFERENCE System.Windows.Forms.dll %><%
using System.Collections.Generic;
using System.Text;
using Microsoft.Win32;
using System.Collections.Specialized;

[Serializable()]
public class TemplateSnippets
{
	public string language;
	public string fileExtension;
	public string boolRepresentationTrue;
	public string classHeader;
	public string tableDescription;
	public string propertyLazyItem;
	public string propertyItem;
	public string fieldDescription;
	public string fieldAttributes;
	public string fieldAttributeParameter;
	public string propertiesEnum;
	public string propertyEnumItem;
	public string foreignKeysHeader;
	public string metadataHeader;
	public string emptyConstructor;
	public string lazyConstructor;
	public string parameter;
	public string parameterAssign;
	public string primaryKeysConstructor;
	public string foreignKeyItemGet;
	public string foreignKeyItem;
	public string nullValue;
	public string nullableType;
	public string collectionType;
	public string foreignKeyAttribute;
	public string searchHeader;
	public string searchBlocks;
	public string classFooter;

	public TemplateSnippets()
	{
	}
}

public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}
	private string database;
	private string outputPath;
	private string defaultNamespace;
	private string pluralLanguage;
	private ArrayList tables;
	private TemplateSnippets snippets;

	// 128 is the value of System.Data.OleDb.OleDbType.Binary enum
	private const int OleDbTypeBinary = 128;
	
	public void Initialize()
	{
		database = input["cmbDatabase"].ToString();
		
		tables = (ArrayList)input["cmbTable"];
		this.outputPath = input["txtOutput"].ToString();
		this.outputPath += this.outputPath.EndsWith("\\") ? "" : "\\";
		
		this.defaultNamespace = input["txtNamespace"].ToString();
		
		this.pluralLanguage = input["cmbPluralLanguage"].ToString();
		
		string parsedTables = string.Empty;
		foreach(object item in tables) 
		{
			parsedTables += ";" + item.ToString();
		}
		
		List<List<DictionaryEntry>> items = (List<List<DictionaryEntry>>)input["languages"];
		
		int selected = Convert.ToInt32(input["cmbLanguage"]);
		
		snippets = new TemplateSnippets();
		
		ReadSnippets(items[selected]);
		
		Registry.CurrentUser.SetValue("BLLBase.PluralLanguage", this.pluralLanguage);
		Registry.CurrentUser.SetValue("BLLBase.Language", snippets.language);
		Registry.CurrentUser.SetValue("BLLBase.Namespace", this.defaultNamespace);
		Registry.CurrentUser.SetValue("BLLBase.Folder", this.outputPath);
		Registry.CurrentUser.SetValue("BLLBase.Database", database);
		Registry.CurrentUser.SetValue("BLLBase.Tables", parsedTables);
	}
	
	private void ReadSnippets(List<DictionaryEntry> items)
	{
		foreach(DictionaryEntry item in items)
		{
			string key = item.Key.ToString();
			string value = item.Value.ToString().Replace("\n", Environment.NewLine);
			
			if (key.Equals("language", StringComparison.InvariantCultureIgnoreCase)) snippets.language = value;
			else if (key.Equals("fileExtension", StringComparison.InvariantCultureIgnoreCase)) snippets.fileExtension = value;
			else if (key.Equals("boolRepresentationTrue", StringComparison.InvariantCultureIgnoreCase)) snippets.boolRepresentationTrue = value;
			else if (key.Equals("classHeader", StringComparison.InvariantCultureIgnoreCase)) snippets.classHeader = value;
			else if (key.Equals("tableDescription", StringComparison.InvariantCultureIgnoreCase)) snippets.tableDescription = value;
			else if (key.Equals("propertyLazyItem", StringComparison.InvariantCultureIgnoreCase)) snippets.propertyLazyItem = value;
			else if (key.Equals("propertyItem", StringComparison.InvariantCultureIgnoreCase)) snippets.propertyItem = value;
			else if (key.Equals("propertiesEnum", StringComparison.InvariantCultureIgnoreCase)) snippets.propertiesEnum = value;
			else if (key.Equals("fieldDescription", StringComparison.InvariantCultureIgnoreCase)) snippets.fieldDescription = value;
			else if (key.Equals("fieldAttributes", StringComparison.InvariantCultureIgnoreCase)) snippets.fieldAttributes = value;
			else if (key.Equals("fieldAttributeParameter", StringComparison.InvariantCultureIgnoreCase)) snippets.fieldAttributeParameter = value;
			else if (key.Equals("propertyEnumItem", StringComparison.InvariantCultureIgnoreCase)) snippets.propertyEnumItem = value;
			else if (key.Equals("foreignKeysHeader", StringComparison.InvariantCultureIgnoreCase)) snippets.foreignKeysHeader = value;
			else if (key.Equals("metadataHeader", StringComparison.InvariantCultureIgnoreCase)) snippets.metadataHeader = value;
			else if (key.Equals("emptyConstructor", StringComparison.InvariantCultureIgnoreCase)) snippets.emptyConstructor = value;
			else if (key.Equals("lazyConstructor", StringComparison.InvariantCultureIgnoreCase)) snippets.lazyConstructor = value;
			else if (key.Equals("parameter", StringComparison.InvariantCultureIgnoreCase)) snippets.parameter = value;
			else if (key.Equals("parameterAssign", StringComparison.InvariantCultureIgnoreCase)) snippets.parameterAssign = value;
			else if (key.Equals("primaryKeysConstructor", StringComparison.InvariantCultureIgnoreCase)) snippets.primaryKeysConstructor = value;
			else if (key.Equals("foreignKeyItemGet", StringComparison.InvariantCultureIgnoreCase)) snippets.foreignKeyItemGet = value;
			else if (key.Equals("foreignKeyItem", StringComparison.InvariantCultureIgnoreCase)) snippets.foreignKeyItem = value;
			else if (key.Equals("nullValue", StringComparison.InvariantCultureIgnoreCase)) snippets.nullValue = value;
			else if (key.Equals("nullableType", StringComparison.InvariantCultureIgnoreCase)) snippets.nullableType = value;
			else if (key.Equals("collectionType", StringComparison.InvariantCultureIgnoreCase)) snippets.collectionType = value;
			else if (key.Equals("foreignKeyAttribute", StringComparison.InvariantCultureIgnoreCase)) snippets.foreignKeyAttribute = value;
			else if (key.Equals("searchHeader", StringComparison.InvariantCultureIgnoreCase)) snippets.searchHeader = value;
			else if (key.Equals("searchBlocks", StringComparison.InvariantCultureIgnoreCase)) snippets.searchBlocks = value;
			else if (key.Equals("classFooter", StringComparison.InvariantCultureIgnoreCase)) snippets.classFooter = value;
		}
	}

	public override void Render()
	{
		if(input["languages"] == null) return;
		
		Initialize();

		string fileName = "";
		
		foreach(string tableName in this.tables)
		{
			ITable table = MyMeta.Databases[this.database].Tables[tableName];
			if (table != null)
			{
				string currentNamespace = this.defaultNamespace;
				string folderName = string.Empty;
				fileName = table.Alias + snippets.fileExtension;

				CreateClass(folderName, fileName, currentNamespace, table);
			}
		}
		
		try 
		{
			System.Diagnostics.Process.Start(Environment.ExpandEnvironmentVariables("%SystemRoot%") + "\\explorer.exe", "\"" + this.outputPath + "\"");
		}
		catch { }
	}
	
	
	public string ToPlural(string text)
	{
		List<string> words = new List<string>();
		foreach (char letter in text)
		{
			if (char.IsUpper(letter))
			{
				words.Add(letter.ToString());
			}
			else
			{
				if (words.Count == 0)
					words.Add(letter.ToString());
				else
					words[words.Count - 1] += letter.ToString();
			}
		}
		
		int i = words.Count - 1;
		if(i >= 0)
		{
			if (this.pluralLanguage.Equals("pt-BR", StringComparison.InvariantCultureIgnoreCase))
			{
				if (words[i].Substring(words[i].Length - 1) == "m")
					words[i] = words[i].Substring(0, words[i].Length - 1) + "ns";
				else if (words[i].Substring(words[i].Length - 1) == "r")
					words[i] = words[i] + "es";
				else
					words[i] = words[i] + "s";
			}
			else if(this.pluralLanguage.Equals("en-US", StringComparison.InvariantCultureIgnoreCase))
			{
				// TODO: Make it like rails'
				words[i] = words[i] + "s";
			}
			else
			{
				words[i] = words[i] + "s";
			}
		}
		
		return string.Join("", words.ToArray());
	}


	public void CreateClass(string folderName, string fileName, string currentNamespace, ITable table)
	{
		output.clear();

		string classHeader = snippets.classHeader;
		classHeader = classHeader.Replace("{className}", table.Alias);
		classHeader = classHeader.Replace("{namespace}", currentNamespace);
		classHeader = classHeader.Replace("{tableSchema}", table.Schema);
		classHeader = classHeader.Replace("{tableName}", table.Name);
		
		string description = string.Empty;
		if(!string.IsNullOrEmpty(table.Description))
			description = snippets.tableDescription.Replace("{description}", table.Description);
		
		classHeader = classHeader.Replace("{description}", description);

		output.writeln(classHeader);

		StringBuilder defaults = new StringBuilder();
		StringBuilder constCampos = new StringBuilder();
		foreach (IColumn col in table.Columns)
		{
			NameValueCollection attributes = new NameValueCollection();

			string fieldName = col.Alias;
			
			if(fieldName == table.Alias) fieldName = "Field" + fieldName;

			foreach (IForeignKey fk in table.ForeignKeys)
			{
				string fkFieldName = string.Empty;
				if (fk.ForeignTable.Equals(table))
					fkFieldName = fk.PrimaryTable.Alias;
				else if (fk.PrimaryTable.Equals(table))
					fkFieldName = fk.ForeignTable.Alias;
			}

			if (fieldName != col.Name)
			{
				attributes.Add("FieldName", col.Name);
			}
			string fieldType = col.LanguageType;
			if (col.IsNullable && !col.LanguageType.ToLower().Equals("string") && col.DataType != OleDbTypeBinary)
			{
				fieldType = snippets.nullableType.Replace("{typeName}", fieldType);
			}
			if (col.IsInPrimaryKey)
			{
				attributes.Add("PrimaryKey", snippets.boolRepresentationTrue);
			}
			if (col.IsAutoKey)
			{
				attributes.Add("AutoNumber", snippets.boolRepresentationTrue);
			}

			string constField = snippets.propertyEnumItem;
			constField = constField.Replace("{propertyName}", fieldName);
			constCampos.AppendLine(constField);

			bool dolazyload = false;
			if (col.DataType == OleDbTypeBinary)
			{
				attributes.Add("LazyLoading", snippets.boolRepresentationTrue);
				dolazyload = true;
			}

			string fieldAttributes = GetFieldAttributes(attributes);

			string propertyItem = snippets.propertyItem;
			if (dolazyload)
				propertyItem = snippets.propertyLazyItem;
				
			propertyItem = propertyItem.Replace("{fieldAttributes}", fieldAttributes);
			propertyItem = propertyItem.Replace("{fieldName}", col.Name);
			
			description = string.Empty;
			if(!string.IsNullOrEmpty(col.Description))
				description = snippets.fieldDescription.Replace("{description}", col.Description);

			propertyItem = propertyItem.Replace("{description}", description);
			
			propertyItem = propertyItem.Replace("{returnType}", fieldType);
			propertyItem = propertyItem.Replace("{propertyName}", fieldName);
			string validationCode = string.Empty;//To be implemented, insert correct tabs after validation code
			propertyItem = propertyItem.Replace("{validationCode}", validationCode);

			output.writeln(propertyItem);
		}

		string propertiesEnum = snippets.propertiesEnum;
		propertiesEnum = propertiesEnum.Replace("{propertyList}", constCampos.ToString());

		output.writeln(propertiesEnum);
		output.writeln(snippets.foreignKeysHeader);

		foreach (IForeignKey fk in table.ForeignKeys)
		{
			if(tables.Contains(fk.PrimaryTable.Name) && tables.Contains(fk.ForeignTable.Name))
			{
				bool toOne = false;
				string propName = "";
				string returnType = "";

				string propAttributes = "";
				bool readOnly = false;

				if (fk.ForeignTable.Equals(table))
				{
					toOne = true;
					
					propName = fk.PrimaryTable.Alias;
					returnType = fk.PrimaryTable.Alias;

					for (int i = 0; i < fk.ForeignColumns.Count; i++)
					{
						string item = snippets.foreignKeyAttribute;
						item = item.Replace("{typeName}", fk.PrimaryTable.Alias);
						item = item.Replace("{foreignName}", fk.PrimaryColumns[i].Alias);
						item = item.Replace("{localName}", fk.ForeignColumns[i].Alias);
						propAttributes += item;
					}
					readOnly = false;
				}
				else if (fk.PrimaryTable.Equals(table) && fk.ForeignTable.PrimaryKeys.Count == 1 && fk.PrimaryColumns.Count == 1 && fk.ForeignColumns[0].IsInPrimaryKey)
				{
					toOne = true;
					propName = fk.ForeignTable.Alias;
					returnType = fk.ForeignTable.Alias;

					for (int i = 0; i < fk.ForeignColumns.Count; i++)
					{
						string item = snippets.foreignKeyAttribute;
						item = item.Replace("{typeName}", returnType);
						item = item.Replace("{foreignName}", fk.ForeignColumns[i].Alias);
						item = item.Replace("{localName}", fk.PrimaryColumns[i].Alias);
						propAttributes += item;
					}
					readOnly = false;
				}
				else if (fk.PrimaryTable.Equals(table))
				{
					toOne = false;
					propName = ToPlural(fk.ForeignTable.Alias);

					string collectionType = fk.ForeignTable.Alias;
					returnType = snippets.collectionType;
					returnType = returnType.Replace("{typeName}", collectionType);

					for (int i = 0; i < fk.ForeignColumns.Count; i++)
					{
						string item = snippets.foreignKeyAttribute;
						item = item.Replace("{typeName}", collectionType);
						item = item.Replace("{foreignName}", fk.ForeignColumns[i].Alias);
						item = item.Replace("{localName}", fk.PrimaryColumns[i].Alias);
						propAttributes += item;
					}
					readOnly = true;
				}

				string fkProperty = (readOnly ? snippets.foreignKeyItemGet : snippets.foreignKeyItem);

				fkProperty = fkProperty.Replace("{relationshipName}", fk.Name);
				fkProperty = fkProperty.Replace("{propertyAttributes}", propAttributes);
				fkProperty = fkProperty.Replace("{propertyName}", propName);
				fkProperty = fkProperty.Replace("{returnType}", returnType);
				fkProperty = fkProperty.Replace("{foreignProperty}", returnType);
				fkProperty = fkProperty.Replace("{nullValue}", snippets.nullValue);

				output.writeln(fkProperty);
			}
		}
		
		output.writeln(snippets.metadataHeader);
		
		string ctor = snippets.emptyConstructor;
		ctor = ctor.Replace("{className}", table.Alias);
		output.writeln(ctor);

		ctor = snippets.lazyConstructor;
		ctor = ctor.Replace("{className}", table.Alias);
		output.writeln(ctor);


		string ctorParams = string.Empty;
		string ctorAssigns = string.Empty;
		foreach (IColumn col in table.PrimaryKeys)
		{
			ctorParams += snippets.parameter.Replace("{type}", col.LanguageType).Replace("{name}", col.Alias);
			if(ctorAssigns.Length > 0) ctorAssigns += Environment.NewLine;
			ctorAssigns += snippets.parameterAssign.Replace("{propertyName}", col.Alias);
		}
		ctorParams = ctorParams.Substring(2);
		ctor = snippets.primaryKeysConstructor;
		ctor = ctor.Replace("{className}", table.Alias);
		ctor = ctor.Replace("{parameters}", ctorParams);
		ctor = ctor.Replace("{initialization}", ctorAssigns);
		output.writeln(ctor);

		output.writeln(snippets.searchHeader);
		string searchBlocks = snippets.searchBlocks;
		searchBlocks = searchBlocks.Replace("{className}", table.Alias);
		output.writeln(searchBlocks);
		output.writeln(snippets.classFooter);

		this.Save(folderName, fileName);
	}
	
	public string GetFieldAttributes(NameValueCollection items)
	{
		string returnValue = snippets.fieldAttributes;
		string attributes = string.Empty;

		foreach (string item in items.AllKeys)
		{
			string value = items[item];
			if (item == "FieldName")
				value = "\"" + value + "\"";
			attributes += ", " + snippets.fieldAttributeParameter.Replace("{name}", item).Replace("{value}", value);
		}
		if (items.Count > 0)
			attributes = attributes.Substring(2);
		return returnValue.Replace("{params}", attributes);
	}

	public void Save(string folderName, string fileName)
	{
		this.Save(folderName, fileName, true);
	}
	
	public void Save(string folderName, string fileName, bool utf)
	{
		string encoding = "utf8";
		if(!utf)
			encoding = "ascii";
		
		if (!string.IsNullOrEmpty(folderName)) {
			output.saveEnc(this.outputPath + folderName + "\\AutoGenerated\\" + fileName, "o", encoding);
		} else {
			output.saveEnc(this.outputPath + "AutoGenerated\\" + fileName, "o", encoding);
		}
		output.clear();
	}

}

%>
##|BODY_END
