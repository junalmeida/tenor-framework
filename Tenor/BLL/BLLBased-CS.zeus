##|TYPE Template
##|UNIQUEID e2e7a5f3-b244-47d3-ba9b-310b58048069
##|TITLE TernoBLL C# Version
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}
	
	
	public override void Setup()
	{
		ui.Title = "Tenor Framework - Mapping";
		ui.Width = 500;
		ui.Height = 550;

		GuiLabel lblDB = ui.AddLabel("lblDatabases", "Choose a database:", "Choose a database.");
		GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "");

		GuiLabel lblTbl = ui.AddLabel("lblTables", "Desired tables:", "Choose the tables wish you want to generate classes.");
		GuiCheckBoxList cmbTables = ui.AddCheckBoxList("cmbTable", "");
		cmbTables.Height = 200;
		GuiButton btn = ui.AddButton("btnSelectAll", "Select all tables", "");
		btn.AttachEvent("onclick", "btn_onclick");
		
		GuiLabel lblNamespace = ui.AddLabel("lblNamespace", "Namespace:", "Default namespace.");
		GuiTextBox txtNamespace = ui.AddTextBox("txtNamespace", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Namespace",@"BLL.REES.Institucional"), "");

		GuiLabel lblOutput = ui.AddLabel("lblOutput", "Target folder:", "Where do you want to save your files?");
		GuiTextBox txtOutput = ui.AddTextBox("txtOutput", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Folder",@"C:\Documents and Settings\Produção\Meus documentos\templates"), "");
		GuiFilePicker btnOutputPath = ui.AddFilePicker("btnOutputPath", "Select the target folder.", "Select the target folder.", "txtOutput", true);

		setupDatabaseDropdown(cmbDatabases);
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
		//cmbTables.AttachEvent("onchange", "cmbTables_onchange");
		
		ui.ShowGui = true;
	}

	public void setupDatabaseDropdown(GuiComboBox cmbDatabases)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					try {
						cmbDatabases.SelectedValue = (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Database",MyMeta.DefaultDatabase.Name);
					} catch (Exception e) { }
					bindTables(cmbDatabases.SelectedValue);
				}
	
				//lblError.Text = "";
			}
			else
			{
				//lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			//lblError.Text = ex.Message;
		}
	}
	
	public void bindTables(string sDatabase)
	{
		string[] tabelas = ((string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Tables","")).Split(';');
	
		//GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			cmbTable.BindData(db.Tables);
			
			foreach(string item in tabelas) 
			{
				try 
				{
					cmbTable.Select(item);
				} catch {}
			}
			//int index = cmbTable.Add("0", "(Todas)");
			//lblError.Text = "";
		}
		catch (Exception ex)
		{
			//lblError.Text = ex.Message;
		}
	}
	
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindTables(cmbDatabases.SelectedText);
	}
	public void btn_onclick(GuiButton control)
	{
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		cmbTable.SelectAll();
		
	}
	/*
	public void cmbTables_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDb = ui["cmbDatabase"] as GuiComboBox;
		GuiComboBox cmbTables = ui["cmbTable"] as GuiComboBox;
		//GuiTextBox txtNomeClasse = ui["txtNomeClasse"] as GuiTextBox;
		
		ITable tbl = MyMeta.Databases[cmbDb.SelectedText].Tables[cmbTables.SelectedText];
		//txtNomeClasse.Text = cmbTables.SelectedText;
	}*/
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
using System.Collections.Generic;
using System.Text;
using Microsoft.Win32;
using System.Collections.Specialized;


public class GeneratedTemplate : DotNetScriptTemplate
{
	private class CodeBlocks
	{
		public const string classHeader = @"
using System.Collections.Generic;
using System.Configuration;
using System;

using Tenor.BLL;
using Tenor.Data;

namespace {namespace}
{
	/// <summary>
	/// Represents the table {tableName}.
	/// {description}
	/// </summary>
	[Serializable(), Table(""{tableName}"", ""{tableSchema}"")]
	public partial class {className} : BLLBase
	{
		
#region Properties
";
		public const string propertyLazyItem = @"
		/// <summary>
		/// Represents the field {fieldName}.
		/// {description}
		/// </summary>
		{fieldAttributes}
		public {returnType} {propertyName}
		{
			get
			{
				return ({returnType})GetPropertyValue();
			}
			set
			{
				{validationCode}				SetPropertyValue(value);
			}
		}		
";
		public const string propertyItem = @"
		private {returnType} _{propertyName};
		/// <summary>
		/// Represents the field {fieldName}.
		/// {description}
		/// </summary>
		{fieldAttributes}
		public {returnType} {propertyName}
		{
			get
			{
				return _{propertyName};
			}
			set
			{
				{validationCode}				_{propertyName} = value;
			}
		}		
";		
		public const string propertiesEnum = @"
		/// <summary>
		/// Keeps a list of constants with property names.
		/// </summary>
		public partial class Properties : object {
			private Properties() { }
{propertyList}
		}
";
		public const string propertyEnumItem = @"
			public const string {propertyName} = ""{propertyName}"";
";
		
		
		public const string foreignKeysHeader = @"
#endregion
#region Foreign Keys
";


        		public const string metadataHeader = @"
#endregion
#region Constructors And Metadata
";

        public const string emptyConstructor = @"
        public {className}()
        { }
";
        public const string lazyConstructor = @"
        public {className}(bool lazyLoadingDisabled) :
            base(lazyLoadingDisabled)
        { }
";
        public const string parameter = ", {type} p{name}";
        public const string parameterAssign = "         this.{propertyName} = p{propertyName};\r\n";
        public const string primaryKeysConstructor = @"
		/// <summary>
		/// Loads {className} from the database with these keys.
		/// </summary><%
        public {className}({parameters}) :
            base()
        { 
{initialization}
            Bind();
        }
";


        public const string foreignKeyItemGet = @"
		/// <summary>
		/// Represents the relationship {relationshipName}.
		/// </summary>
		{propertyAttributes}
		public {returnType} {propertyName} 
        {
            get
            {
                return ({returnType})GetPropertyValue();
            }
        }
";
        public const string foreignKeyItem = @"
		/// <summary>
		/// Represents the relationship {relationshipName}.
		/// </summary>
		{propertyAttributes}
		public {returnType} {propertyName}
		{
			get 
			{
				return ({returnType})GetPropertyValue();
			}
			set
			{
				SetPropertyValue(value);
			}
        }
";
        public const string nullValue = "null";
	    public const string nullableType = "{typeName}?";
        public const string collectionType = "BLLCollection<{typeName}>";

        public static string GetFieldAttributes(NameValueCollection items) 
        {
            string returnValue = "[Field(";
			string attributes = string.Empty;
			
			foreach (string item in items.AllKeys){
				string value = items[item];
				if (item == "FieldName")
					value = "\"" + value + "\"";
				attributes+= ", " + item + "=" + value;
			}
			if (items.Count > 0)
				attributes = attributes.Substring(2);
            return returnValue + attributes + ")]";
        }

        public const string foreignKeyAttribute = "[ForeignKey({typeName}.Properties.{foreignName}, Properties.{localName})]";
        public const string searchHeader = @"
#endregion
#region Search
";

        public const string searchBlocks=  @"

        public static {className}[] Search(ConditionCollection conditions, SortingCollection sorting)
        {
            return Search(conditions, sorting, false);
        }

        public static {className}[] Search(ConditionCollection conditions, SortingCollection sorting, bool distinct)
        {
            return Search(conditions, sorting, distinct, 0);
        }

        public static {className}[] Search(ConditionCollection conditions, SortingCollection sorting, bool distinct, int limit)
        {
            return Search(conditions, sorting, distinct, limit, null);
        }

		/// <summary>
		/// Performs a search within this class.
		/// </summary>
		public static {className}[] Search(ConditionCollection conditions, SortingCollection sorting, bool distinct, int limit, ConnectionStringSettings connection)
		{
			SearchOptions sc = new SearchOptions(typeof({className}));
			if (conditions != null)
				sc.Conditions = conditions;
			if (sorting != null)
				sc.Sorting = sorting;

			sc.Distinct = distinct;
            sc.Top = limit;

			return ({className}[])(BLLBase.Search(sc, connection));
		}
";
        public const string classFooter = @"
#endregion
    }
}
";
	}

	public GeneratedTemplate(ZeusContext context) : base(context) {}
    private string database;
	private string outputPath;
    private string defaultNamespace;
    private ArrayList tables;
	public void Initialize()
	{
		database = input["cmbDatabase"].ToString();
		
		tables = (ArrayList)input["cmbTable"];
		this.outputPath = input["txtOutput"].ToString();
		this.outputPath += this.outputPath.EndsWith("\\") ? "" : "\\";
		
		this.defaultNamespace = input["txtNamespace"].ToString();
		
		string parsedTables = string.Empty;
		foreach(object item in tables) 
		{
			parsedTables += ";" + item.ToString();
		}
		Registry.CurrentUser.SetValue("BLLBase.Namespace", this.defaultNamespace);
		Registry.CurrentUser.SetValue("BLLBase.Folder", this.outputPath);
		Registry.CurrentUser.SetValue("BLLBase.Database", database);
		Registry.CurrentUser.SetValue("BLLBase.Tables", parsedTables);
	}

	public override void Render()
	{
		Initialize();

		string fileName = "";
		
		foreach(ITable table in MyMeta.Databases[this.database].Tables)
		{
			if (this.tables.Contains(table.Name))
			{
				string currentNamespace = this.defaultNamespace;
                string folderName = string.Empty;
				if (!string.IsNullOrEmpty(table.Schema) && table.Schema != "dbo") //For Microsoft SQL Server 
                {
                    folderName = table.Schema;
                    currentNamespace += "." + folderName;
				}
				
				fileName = table.Name + ".cs";

                CreateClass(folderName, fileName, currentNamespace, table);
			}
		}
		
		try 
        {
			System.Diagnostics.Process.Start(Environment.ExpandEnvironmentVariables("%SystemRoot%") + "\\explorer.exe", "\"" + this.outputPath + "\"");
		} catch { }
	}
	
	
	public string ToPlural(string texto) {
		List<string> l = new List<string>();
		foreach (char i in texto) {
			if (char.IsUpper(i)) {
				l.Add(i.ToString());
			} else {
				if (l.Count == 0)
					l.Add(i.ToString());
				else
					l[l.Count-1] += i.ToString();
			}
		}
		for(int i=0;i<l.Count;i++) {
			if (l[i].Substring(l[i].Length-1) == "m") {
				l[i] = l[i].Substring(0,l[i].Length-1) + "ns";
			} else if (l[i].Substring(l[i].Length-1) == "r") {
				l[i] = l[i] + "es";
			} else {
				l[i] = l[i] + "s";
			}
		}
		return string.Join("", l.ToArray());
	}


    public void CreateClass(string folderName, string fileName, string currentNamespace, ITable table)
    {
		output.clear();
	
        string classHeader = CodeBlocks.classHeader;
		classHeader = classHeader.Replace("{className}", table.Name);
        classHeader = classHeader.Replace("{namespace}", currentNamespace);
        classHeader = classHeader.Replace("{tableSchema}", table.Schema);
        classHeader = classHeader.Replace("{tableName}", table.Name);
        classHeader = classHeader.Replace("{description}", table.Description);

        output.writeln(classHeader);


        StringBuilder defaults = new StringBuilder();
        StringBuilder constCampos = new StringBuilder();
        foreach (IColumn col in table.Columns)
        {

            NameValueCollection attributes = new NameValueCollection();

            string fieldName = col.Name;

            bool changeName = false;
            foreach (IForeignKey fk in table.ForeignKeys)
            {
                string fkFieldName = string.Empty;
                if (fk.ForeignTable.Equals(table))
                    fkFieldName = fk.PrimaryTable.Name;
                else if (fk.PrimaryTable.Equals(table))
                    fkFieldName = fk.ForeignTable.Name;

                if (string.Equals(fieldName, fkFieldName))
                    changeName = true;
            }


            if (changeName || fieldName.ToLower().Equals(table.Name.ToLower()))
            {
                fieldName = "Field" + fieldName;
                attributes.Add("FieldName", fieldName);
            }
            string tipoCampo = col.LanguageType;
            if (col.IsNullable && !col.LanguageType.ToLower().Equals("string") && !col.LanguageType.ToLower().Contains("[]"))
            {
                tipoCampo = CodeBlocks.nullableType.Replace("{typeName}", tipoCampo);
            }
            if (col.IsInPrimaryKey)
            {
                attributes.Add("PrimaryKey", "true");
            }
            if (col.IsAutoKey)
            {
                attributes.Add("AutoNumber", "true");
            }

            string constField = CodeBlocks.propertyEnumItem;
            constField = constField.Replace("{propertyName}", fieldName);
            constCampos.AppendLine(constField);

            bool dolazyload = false;
            if (col.LanguageType.ToLower() == "byte[]")
            {
                attributes.Add("LazyLoading", "true");
                dolazyload = true;
            }

            string fieldAttributes = CodeBlocks.GetFieldAttributes(attributes);
            /*
            // ----- Valor Padrão do Banco -----
			
				
            if (!string.IsNullOrEmpty(col.Default)) {
                string valor = col.Default;
                switch (col.LanguageType) {
                    case "DateTime":
                        if (valor.ToLower().Contains("getdate()")) {
                            valor = nomeCampo + " = DateTime.Now();";
                        } else {
                            valor = nomeCampo + " = DateTime.Parse(" + valor + ");";
                        }
                    break;
                    case "string":
                        if (valor.StartsWith("N'")) {
                            valor = nomeCampo + " = \"" + valor.Substring(2, valor.Length - 5).Replace("''", "'") +  "\";";
                        } else if (valor.StartsWith("(N'")) {
                            valor = nomeCampo + " = \"" + valor.Substring(3, valor.Length - 6).Replace("''", "'") +  "\";";
                        } else if (valor.StartsWith("'")) {
                            valor = nomeCampo + " = \"" + valor.Substring(1, valor.Length - 4).Replace("''", "'") +  "\";";
                        } else {
                            valor = nomeCampo + " = " + valor.Replace("'","\"").Replace("\"\"", "'") + ";";
                        }
						
			
								
                    break;
                    default:
                        valor = nomeCampo + " = " + valor + ";";
                    break;
                }
			
				
                defaults.AppendLine("			" + valor);
            }
            */

            // ---------------------------------

            string propertyItem = CodeBlocks.propertyItem;
			if (dolazyload)
				propertyItem = CodeBlocks.propertyLazyItem;
				
            propertyItem = propertyItem.Replace("{fieldAttributes}", fieldAttributes);
            propertyItem = propertyItem.Replace("{fieldName}", col.Name);
            propertyItem = propertyItem.Replace("{description}", col.Description);
            propertyItem = propertyItem.Replace("{returnType}", tipoCampo);
            propertyItem = propertyItem.Replace("{propertyName}", fieldName);
            string validationCode = string.Empty;//To be implemented
            propertyItem = propertyItem.Replace("{validationCode}", validationCode);

            output.writeln(propertyItem);
        }

        string propertiesEnum = CodeBlocks.propertiesEnum;
        propertiesEnum = propertiesEnum.Replace("{propertyList}", constCampos.ToString());

        output.writeln(propertiesEnum);
        output.writeln(CodeBlocks.foreignKeysHeader);

        foreach (IForeignKey fk in table.ForeignKeys)
        {

            string fkNamespace = "";

            bool toOne = false;
            string propName = "";
            string returnType = "";

            string propAttributes = "";
            bool readOnly = false;


            if (fk.ForeignTable.Equals(table))
            {
                toOne = true;
                propName = fk.PrimaryTable.Name;
                fkNamespace = fk.PrimaryTable.Schema;
                if (fkNamespace != "" && fkNamespace != "dbo" && fkNamespace != table.Schema)
                    fkNamespace = fkNamespace + ".";
                else
                    fkNamespace = "";
                returnType = fkNamespace + fk.PrimaryTable.Name;

                // FIX ME: The items below must be property names.
                for (int i = 0; i < fk.ForeignColumns.Count; i++)
                {
                    string item = CodeBlocks.foreignKeyAttribute;
                    item = item.Replace("{typeName}", returnType);
                    item = item.Replace("{foreignName}", fk.PrimaryColumns[i].Name);
                    item = item.Replace("{localName}", fk.ForeignColumns[i].Name);
                    propAttributes += item + "\r\n";
                }
                readOnly = false;
            }
            else if (fk.PrimaryTable.Equals(table) && fk.ForeignTable.PrimaryKeys.Count == 1 && fk.PrimaryColumns.Count == 1 && fk.ForeignColumns[0].IsInPrimaryKey)
            {

                toOne = true;
                propName = fk.ForeignTable.Name;
                fkNamespace = fk.ForeignTable.Schema;
                if (fkNamespace != "" && fkNamespace != "dbo" && fkNamespace != table.Schema)
                    fkNamespace = fkNamespace + ".";
                else
                    fkNamespace = "";
                returnType = fkNamespace + fk.ForeignTable.Name;

                // FIX ME: The items below must be property names.
                for (int i = 0; i < fk.ForeignColumns.Count; i++)
                {
                    string item = CodeBlocks.foreignKeyAttribute;
                    item = item.Replace("{typeName}", returnType);
                    item = item.Replace("{foreignName}", fk.ForeignColumns[i].Name);
                    item = item.Replace("{localName}", fk.PrimaryColumns[i].Name);
                    propAttributes += item + "\r\n";
                }
                readOnly = false;
            }
            else if (fk.PrimaryTable.Equals(table))
            {
                toOne = false;
                propName = ToPlural(fk.ForeignTable.Name);
                fkNamespace = fk.ForeignTable.Schema;
                if (fkNamespace != "" && fkNamespace != "dbo" && fkNamespace != table.Schema)
                    fkNamespace = fkNamespace + ".";
                else
                    fkNamespace = "";

				string collectionType = fkNamespace + fk.ForeignTable.Name;
                returnType = CodeBlocks.collectionType;
                returnType = returnType.Replace("{typeName}", collectionType);

                // FIX ME: The items below must be property names.
                for (int i = 0; i < fk.ForeignColumns.Count; i++)
                {
                    string item = CodeBlocks.foreignKeyAttribute;
                    item = item.Replace("{typeName}", collectionType);
                    item = item.Replace("{foreignName}", fk.ForeignColumns[i].Name);
                    item = item.Replace("{localName}", fk.PrimaryColumns[i].Name);
                    propAttributes += item + "\r\n";
                }
                readOnly = true;
            }

            string fkProperty = (readOnly ? CodeBlocks.foreignKeyItemGet : CodeBlocks.foreignKeyItem);

            fkProperty = fkProperty.Replace("{relationshipName}", fk.Name);
            fkProperty = fkProperty.Replace("{propertyAttributes}", propAttributes);
            fkProperty = fkProperty.Replace("{propertyName}", propName);
            fkProperty = fkProperty.Replace("{returnType}", returnType);
            fkProperty = fkProperty.Replace("{foreignProperty}", returnType);
            fkProperty = fkProperty.Replace("{nullValue}", CodeBlocks.nullValue);

            output.writeln(fkProperty);
        }
        output.writeln(CodeBlocks.metadataHeader);
        string ctor = CodeBlocks.emptyConstructor;
        ctor = ctor.Replace("{className}", table.Name);
        output.writeln(ctor);

        ctor = CodeBlocks.lazyConstructor;
        ctor = ctor.Replace("{className}", table.Name);
        output.writeln(ctor);


        string ctorParams = string.Empty;
        string ctorAssigns = string.Empty;
        foreach (IColumn col in table.PrimaryKeys)
        {
            ctorParams += CodeBlocks.parameter.Replace("{type}", col.LanguageType).Replace("{name}", col.Name);
            ctorAssigns += CodeBlocks.parameterAssign.Replace("{propertyName}", col.Name);
        }
        ctorParams = ctorParams.Substring(2);
        ctor = CodeBlocks.primaryKeysConstructor;
        ctor = ctor.Replace("{className}", table.Name);
        ctor = ctor.Replace("{parameters}", ctorParams);
        ctor = ctor.Replace("{initialization}", ctorAssigns);
        output.writeln(ctor);

        output.writeln(CodeBlocks.searchHeader);
        string searchBlocks = CodeBlocks.searchBlocks;
        searchBlocks = searchBlocks.Replace("{className}", table.Name);
        output.writeln(searchBlocks);
        output.writeln(CodeBlocks.classFooter);

        this.Save(folderName, fileName);

    }

	public void Save(string folderName, string fileName)
	{
		this.Save(folderName, fileName, true);
	}
	
	public void Save(string folderName, string fileName, bool utf)
	{
		string encoding = "utf8";
		if(!utf)
			encoding = "ascii";
		
		if (!string.IsNullOrEmpty(folderName)) {
			output.saveEnc(this.outputPath + folderName + "\\AutoGenerated\\" + fileName, "o", encoding);
		} else {
			output.saveEnc(this.outputPath + "AutoGenerated\\" + fileName, "o", encoding);
		}
		output.clear();
	}

}

%>
##|BODY_END
