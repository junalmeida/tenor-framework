##|TYPE Template
##|UNIQUEID e2e7a5f3-b244-47d3-ba9b-310b58048069
##|TITLE TernoBLL C# Version
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	public override void Setup()
	{
		ui.Title = "Gerar códigos";
		ui.Width = 500;
		ui.Height = 650;

		GuiLabel lblDB = ui.AddLabel("lblDatabases", "Escolha um banco:", "Escolha um banco de dados.");
		GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "");

		GuiLabel lblTbl = ui.AddLabel("lblTables", "Escolha uma tabela:", "Escolha uma tabela.");
		GuiCheckBoxList cmbTables = ui.AddCheckBoxList("cmbTable", "");
		cmbTables.Height = 200;
		GuiButton btn = ui.AddButton("btnSelectAll", "Selecionar Todos", "");
		btn.AttachEvent("onclick", "btn_onclick");
		
		GuiLabel lblNamespace = ui.AddLabel("lblNamespace", "Namespace:", "Namespace da(s) classe(s).");
		GuiTextBox txtNamespace = ui.AddTextBox("txtNamespace", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.NameSpace",@"BLL.REES.Institucional"), "");

		/*GuiLabel lblClasse = ui.AddLabel("lblNomeClasse", "Nome da Classe:", "Nome da Classe. Mude se nÃ£o coincidir com o nome da tabela. Ex.: Usuario");
		GuiTextBox txtNomeClasse = ui.AddTextBox("txtNomeClasse", "", "");
*/
		GuiLabel lblOutput = ui.AddLabel("lblOutput", "Pasta de destino:", "Pasta onde serão salvos os arquivos.");
		GuiTextBox txtOutput = ui.AddTextBox("txtOutput", (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Pasta",@"C:\Documents and Settings\Produção\Meus documentos\templates"), "");
		GuiFilePicker btnOutputPath = ui.AddFilePicker("btnOutputPath", "Escolha a pasta de destino para os arquivos gerados.", "Selecione a pasta de destino.", "txtOutput", true);

		setupDatabaseDropdown(cmbDatabases);
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
		//cmbTables.AttachEvent("onchange", "cmbTables_onchange");
		
		ui.ShowGui = true;
	}

	public void setupDatabaseDropdown(GuiComboBox cmbDatabases)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					try {
						cmbDatabases.SelectedValue = (string)Microsoft.Win32.Registry.CurrentUser.GetValue("BLLBase.Banco",MyMeta.DefaultDatabase.Name);
					} catch (Exception e) { }
					bindTables(cmbDatabases.SelectedValue);
				}
	
				//lblError.Text = "";
			}
			else
			{
				//lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			//lblError.Text = ex.Message;
		}
	}
	
	public void bindTables(string sDatabase)
	{
		//GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			cmbTable.BindData(db.Tables);
			//int index = cmbTable.Add("0", "(Todas)");
			//lblError.Text = "";
		}
		catch (Exception ex)
		{
			//lblError.Text = ex.Message;
		}
	}
	
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindTables(cmbDatabases.SelectedText);
	}
	public void btn_onclick(GuiButton control)
	{
		GuiCheckBoxList cmbTable = ui["cmbTable"] as GuiCheckBoxList;
		cmbTable.SelectAll();
		
	}
	/*
	public void cmbTables_onchange(GuiComboBox control)
	{
		GuiComboBox cmbDb = ui["cmbDatabase"] as GuiComboBox;
		GuiComboBox cmbTables = ui["cmbTable"] as GuiComboBox;
		//GuiTextBox txtNomeClasse = ui["txtNomeClasse"] as GuiTextBox;
		
		ITable tbl = MyMeta.Databases[cmbDb.SelectedText].Tables[cmbTables.SelectedText];
		//txtNomeClasse.Text = cmbTables.SelectedText;
	}*/
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
using System.Collections.Generic;
using System.Text;
using Microsoft.Win32;
public class GeneratedTemplate : DotNetScriptTemplate
{
	public ITable tbl;
	public string nomeDB;
	public ArrayList tabelaEscolhida;
	public string nomeTabela;
	public string outputPath;
	
	public string Namespace;
	public string OriginalNamespace;

	public string nomeClasse;
	public string schema;

	public string tagHeaderAbrir;
	public string tagHeaderFechar;

	public GeneratedTemplate(ZeusContext context) : base(context) {}
	
	public void inicializarPropriedades()
	{
		this.nomeDB = input["cmbDatabase"].ToString();
		
		this.tabelaEscolhida = (ArrayList)input["cmbTable"];
		//this.nomeTabela = input["cmbTable"].ToString();
		this.outputPath = input["txtOutput"].ToString();
		this.outputPath += this.outputPath.EndsWith("\\") ? "" : "\\";
		
		this.Namespace = input["txtNamespace"].ToString();
		this.OriginalNamespace = input["txtNamespace"].ToString();
		
		//this.nomeClasse = this.nomeTabela;
		
		//this.tbl = MyMeta.Databases[nomeDB].Tables[nomeTabela];

		this.tagHeaderAbrir = "<" + "%" + "@";
		this.tagHeaderFechar = "%" + ">";
		
		
		Registry.CurrentUser.SetValue("BLLBase.NameSpace", this.Namespace);
		Registry.CurrentUser.SetValue("BLLBase.Pasta", this.outputPath);
		Registry.CurrentUser.SetValue("BLLBase.Banco", this.nomeDB);
	}

	public override void Render()
	{
		this.inicializarPropriedades();

		string fileName = "";
		
		foreach(ITable tabela in MyMeta.Databases[nomeDB].Tables)
		{
			if (this.tabelaEscolhida.Contains(tabela.Name))
			{
				this.tbl = tabela;
				this.nomeTabela = tbl.Name;
				this.nomeClasse = this.nomeTabela;
				this.schema = tbl.Schema;
				this.Namespace = this.OriginalNamespace;
				if (this.schema != "dbo") {
					this.Namespace += "." + this.schema;
				}
				
				fileName = nomeClasse + ".cs";
				this.gerarClasse(fileName);
			}
		}
		
		try {
			System.Diagnostics.Process.Start(Environment.ExpandEnvironmentVariables("%SystemRoot%") + "\\explorer.exe", "\"" + this.outputPath + "\"");
		} catch (Exception e) { }
		
	}
	
	
	public string ToPlural(string texto) {
		List<string> l = new List<string>();
		foreach (char i in texto) {
			if (char.IsUpper(i)) {
				l.Add(i.ToString());
			} else {
				if (l.Count == 0)
					l.Add(i.ToString());
				else
					l[l.Count-1] += i.ToString();
			}
		}
		for(int i=0;i<l.Count;i++) {
			if (l[i].Substring(l[i].Length-1) == "m") {
				l[i] = l[i].Substring(0,l[i].Length-1) + "ns";
			} else if (l[i].Substring(l[i].Length-1) == "r") {
				l[i] = l[i] + "es";
			} else {
				l[i] = l[i] + "s";
			}
		}
		return string.Join("", l.ToArray());
	}
	

	public void gerarClasse(string fileName)
	{

%>
using System.Collections.Generic;
using System.Configuration;
using System;

using Tenor.BLL;
using Tenor.Data;

namespace <%=Namespace%>
{
	/// <summary>
	/// Representa a tabela <%= tbl.Name %>.
	/// <%= tbl.Description.Replace("\r\n","\r\n	///") %>
	/// </summary>
	[Serializable()]
	public partial class <%= tbl.Name %> : BLLBase
	{
		
#region Campos
<%
		//Para aproveitar o FOR das colunas, os valores padrão serão salvos no StringBuilder
		StringBuilder defaults = new StringBuilder();
		StringBuilder constCampos = new StringBuilder();
		foreach (IColumn col in tbl.Columns)
		{
		
		
			string nomeCampo = col.Name;
			string atributos = "";
			
			bool mudarNomeCampo = false;
			foreach(IForeignKey fk in tbl.ForeignKeys) {
				string nomeCampoFK = string.Empty;
				if (fk.ForeignTable.Equals(this.tbl))
					nomeCampoFK = fk.PrimaryTable.Name;
				else if(fk.PrimaryTable.Equals(this.tbl))
					nomeCampoFK = fk.ForeignTable.Name;
				if (string.Equals(nomeCampo, nomeCampoFK))
					mudarNomeCampo = true;
			}

			
			if (mudarNomeCampo || nomeCampo.ToLower().Equals(tbl.Name.ToLower()))
			{
				nomeCampo = "Campo" + nomeCampo;
				atributos += "FieldName=\"" + col.Name + "\", PrimaryKey=" + col.IsInPrimaryKey.ToString() + ", AutoNumber=" + col.IsAutoKey.ToString();
			}
			string tipoCampo = col.LanguageType;
			if (col.IsNullable && !col.LanguageType.ToLower().Equals("string") && !col.LanguageType.ToLower().Contains("[]"))
			{
				tipoCampo = "" + col.LanguageType + "?";
			}
			if (string.IsNullOrEmpty(atributos) && col.IsInPrimaryKey)
			{
				atributos += "PrimaryKey=true, AutoNumber=" + col.IsAutoKey.ToString().ToLower();
			}

			constCampos.AppendLine("			public const string " + nomeCampo + " = \"" + nomeCampo + "\";");

			bool dolazyload = false;
			if (col.LanguageType.ToLower() == "byte[]") {
				if (!string.IsNullOrEmpty(atributos)) atributos += ", ";
				atributos += "LazyLoading=true";
				dolazyload=true;
			}
			
			string field = "[Field(";
			field += atributos;
			field += ")]";
			
			// ----- Valor Padrão do Banco -----
			
				
			if (!string.IsNullOrEmpty(col.Default)) {
				string valor = col.Default;
				switch (col.LanguageType) {
					case "DateTime":
						if (valor.ToLower().Contains("getdate()")) {
							valor = nomeCampo + " = DateTime.Now();";
						} else {
							valor = nomeCampo + " = DateTime.Parse(" + valor + ");";
						}
					break;
					case "string":
						if (valor.StartsWith("N'")) {
							valor = nomeCampo + " = \"" + valor.Substring(2, valor.Length - 5).Replace("''", "'") +  "\";";
						} else if (valor.StartsWith("(N'")) {
							valor = nomeCampo + " = \"" + valor.Substring(3, valor.Length - 6).Replace("''", "'") +  "\";";
						} else if (valor.StartsWith("'")) {
							valor = nomeCampo + " = \"" + valor.Substring(1, valor.Length - 4).Replace("''", "'") +  "\";";
						} else {
							valor = nomeCampo + " = " + valor.Replace("'","\"").Replace("\"\"", "'") + ";";
						}
						
			
								
					break;
					default:
						valor = nomeCampo + " = " + valor + ";";
					break;
				}
			
				
				defaults.AppendLine("			" + valor);
			}
			
			
			// ---------------------------------
			
			
			
			
if (dolazyload) { %>
		private bool _<%= nomeCampo %>_firstaccess = true;
<% 
}
%>		private <%= tipoCampo %> _<%= nomeCampo %>;
		/// <summary>
		/// Campo <%= nomeCampo %>.
		/// <%= col.Description.Replace("\r\n","\r\n		///") %>
		/// </summary>
		<%= field %>
		public <%= tipoCampo %> <%= nomeCampo %> {
			get {
				<%
				if (dolazyload) {
				%>if (_<%= nomeCampo %>_firstaccess && !LazyLoadingDisabled) {
					LoadProperty("<%= nomeCampo %>");
				}
<%				}
				%>return _<%= nomeCampo %>;
			}
			set {
<%
				if (dolazyload) {
%>				_<%= nomeCampo %>_firstaccess = false;
<%				}
				if (tipoCampo == "string" && col.CharacterMaxLength > 0) {
					%>				if (!string.IsNullOrEmpty(value) && value.Length > <%=col.CharacterMaxLength.ToString()%>) {
					throw new InvalidOperationException("Cannot set a string with Length greater than <%=col.CharacterMaxLength.ToString()%>");
				}
<%
				}
				
				%>				_<%= nomeCampo %> = value;
			}
		}
<%
		}
%>		

		public partial class Campos : object {
			private Campos() { }
			
<%=constCampos.ToString()%>		
		}

#endregion

#region Foreign Keys
		
<%
		foreach(IForeignKey fk in tbl.ForeignKeys)
		{
		
			string nmeSpace = "";
		
			bool onetoone = false;
			string nomeCampo = "";
			string tipoCampo = "";
			
			string atributos = "";
			string constructor = "";
			string readOnly = "";
			
			bool isNew = false;
			
			if (fk.ForeignTable.Equals(this.tbl))
			{
				onetoone = true;
				nomeCampo = fk.PrimaryTable.Name;
				nmeSpace = fk.PrimaryTable.Schema;
				if (nmeSpace != "" && nmeSpace != "dbo" && nmeSpace != tbl.Schema)
					nmeSpace = nmeSpace + ".";
				else
					nmeSpace = "";
				tipoCampo = nmeSpace+ fk.PrimaryTable.Name;
				
				// Consertar isto! Os itens abaixo devem ser nomes de propriedades.
				atributos = "[ForeignKey(\"" + fk.PrimaryColumns[0].Name + "\", \"" + fk.ForeignColumns[0].Name + "\")]";
				readOnly = "";
			}
			else if(fk.PrimaryTable.Equals(this.tbl) && fk.ForeignTable.PrimaryKeys.Count == 1 && fk.PrimaryColumns.Count == 1 && fk.ForeignColumns[0].IsInPrimaryKey) {
				onetoone = true;
				nomeCampo = fk.ForeignTable.Name;
				nmeSpace = fk.ForeignTable.Schema;
				if (nmeSpace != "" && nmeSpace != "dbo" && nmeSpace != tbl.Schema)
					nmeSpace = nmeSpace + ".";
				else
					nmeSpace = "";
				tipoCampo = nmeSpace + fk.ForeignTable.Name;
				
				// Consertar isto! Os itens abaixo devem ser nomes de propriedades.
				atributos = "[ForeignKey(\"" + fk.ForeignColumns[0].Name + "\", \"" + fk.PrimaryColumns[0].Name + "\")]";
				readOnly = "";
			}
			else if(fk.PrimaryTable.Equals(this.tbl))
			{
				nomeCampo = ToPlural(fk.ForeignTable.Name);
				nmeSpace = fk.ForeignTable.Schema;
				if (nmeSpace != "" && nmeSpace != "dbo" && nmeSpace != tbl.Schema)
					nmeSpace = nmeSpace + ".";
				else
					nmeSpace = "";
				
				tipoCampo = "BLLCollection<" + nmeSpace + fk.ForeignTable.Name + ">";
				constructor = "(this, \"" + nomeCampo + "\")";
				isNew = true;
				// Consertar isto! Os itens abaixo devem ser nomes de propriedades.
				atributos = "[ForeignKey(\"" + fk.ForeignColumns[0].Name + "\", \"" + fk.PrimaryColumns[0].Name + "\")]";
				readOnly = "ReadOnly ";
			}
			
%>
		private bool _<%= nomeCampo %>_firstaccess = true;
		private <%= tipoCampo %> _<%= nomeCampo %>;
		/// <summary>
		/// 
		/// </summary>
		<%= atributos %>
		public <%= tipoCampo %> <%= nomeCampo %> {
			get {
				<%
				if(isNew)
				{%>if (_<%= nomeCampo %> == null) {
                    _<%= nomeCampo %> = new <%= tipoCampo + constructor %>;
                }
				<%
				}
				%>if (_<%= nomeCampo %>_firstaccess && !LazyLoadingDisabled) {
					_<%= nomeCampo %>_firstaccess = false;
					LoadForeign("<%= nomeCampo %>", true);
				}
				return _<%= nomeCampo %>;
			}<%
			if(string.IsNullOrEmpty(readOnly))
			{
%>
			set {
				_<%= nomeCampo %>_firstaccess = false;
				_<%= nomeCampo %> = value;
				<%
			if (onetoone) {
				string mynull = "null";
				if (!fk.ForeignColumns[0].IsNullable)
					mynull = "0";
			%>
				if (value == null) {
					<%=fk.ForeignColumns[0].Name%> = <%=mynull %>;
				} else {
					<%=fk.ForeignColumns[0].Name%> = value.<%=fk.PrimaryColumns[0].Name%>;
				}
			<%
			}
			%>}<%
			}
%>
		}
<%
		}
%>

#endregion

#region Constructors And Metadata

		public <%= tbl.Name %>() { }

		public <%= tbl.Name %>(bool LazyLoadingDisabled) : base(LazyLoadingDisabled) { }
		
		/// <summary>
		/// Carrega os dados de um <%= tbl.Name %> cadastrado com a chave primária passada
		/// </summary><%
		string assign = "";
		string construtor = "";
		foreach (IColumn col in tbl.PrimaryKeys)
		{
			construtor += (string.IsNullOrEmpty(construtor)) ? "" : ", ";
			construtor += col.LanguageType + " p" + col.Name;
			assign += "this." + col.Name + " = p" + col.Name + ";\r\n";
%>
		/// <param name="p<%= col.Name %>"><%= col.Name %> do <%= tbl.Name %></param><%
		}
%>
		public <%= tbl.Name %>(<%= construtor %>) {
			<%= assign %>
			Bind();
		}


		/// <summary>
		/// Carrega os dados de um <%= tbl.Name %> cadastrado com a chave primária passada
		/// </summary><%
		foreach (IColumn col in tbl.PrimaryKeys)
		{
%>
		/// <param name="p<%= col.Name %>"><%= col.Name %> do <%= tbl.Name %></param><%
		}
		construtor += ", bool LazyLoadingDisabled";
%>
		public <%= tbl.Name %>(<%= construtor %>) : base(LazyLoadingDisabled) {
			<%= assign %>;
			Bind();
		}


		public override string SchemaName
		{
			get {
				return "<%= tbl.Schema %>";
			}
		}
		
		public override string TableName
		{
			get {
				return "<%= tbl.Name %>";
			}
		}
#endregion

#region Search

        public static <%= tbl.Name %>[] Search(ConditionCollection Conditions, SortingCollection Sorting) {
            return Search(Conditions, Sorting, false);
        }

        public static <%= tbl.Name %>[] Search(ConditionCollection Conditions, SortingCollection Sorting, bool Distinct) {
            return Search(Conditions, Sorting, Distinct, true);
        }

        public static <%= tbl.Name %>[] Search(ConditionCollection Conditions, SortingCollection Sorting, bool Distinct, bool LazyLoading) {
            return Search(Conditions, Sorting, Distinct, LazyLoading, null);
        }

        /// <summary>
        /// Realiza uma pesquisa e retorna uma coleção de CLASSE
        /// </summary>
        /// <param name="Conditions">Informe uma coleção de condições para sua consulta.</param>
        /// <param name="Sorting">Informe uma coleção de ordenação para sua busca.</param>
        /// <param name="Distinct">Indica se deve buscar somente registros únicos</param>
        /// <param name="LazyLoading"></param>
        /// <param name="Connection">Conexão usada.</param>
        /// <returns>Uma lista com os resultados</returns>
        /// <remarks></remarks>
        public static <%= tbl.Name %>[] Search(ConditionCollection Conditions, SortingCollection Sorting, bool Distinct, bool LazyLoading, ConnectionStringSettings Connection) {
            SearchOptions sc = new SearchOptions(typeof(<%= tbl.Name %>));
            if (Conditions != null) {
                sc.Conditions = Conditions;
            }
            if (Sorting != null) {
                sc.Sorting = Sorting;
            }
            sc.Distinct = Distinct;
            sc.LazyLoading = LazyLoading;

            return (<%= tbl.Name %>[])(BLLBase.Search(sc, Connection));
        }
        
#endregion
		/// <summary>
		/// Inicializa a classe com os valores padrão.
		/// </summary>
		protected void InicializarPadroes(){
<%= defaults.ToString()%>		
		}
	}
}
<%
		this.salvar(fileName);
	}

	public void salvar(string nomeArquivo)
	{
		this.salvar(nomeArquivo, true);
	}
	
	public void salvar(string nomeArquivo, bool utf)
	{
		string encoding = "utf8";
		if(!utf)
			encoding = "ascii";
		
		if (this.tbl.Schema != "dbo") {
			output.saveEnc(this.outputPath + this.tbl.Schema + "\\AutoGenerated\\" + nomeArquivo, "o", encoding);
		} else {
			output.saveEnc(this.outputPath + "AutoGenerated\\" + nomeArquivo, "o", encoding);
		}
		output.clear();
	}

}
%>
##|BODY_END
